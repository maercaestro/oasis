#!/usr/bin/env python3
"""
Email Configuration Setup for OASIS Margin Optimization
Run this script to configure email notifications using environment variables
"""

import json
import getpass
import smtplib
import os
from email.mime.text import MIMEText

def test_email_connection(smtp_server, smtp_port, email, password):
    """Test email connection and credentials"""
    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(email, password)
        server.quit()
        return True, "Connection successful!"
    except Exception as e:
        return False, str(e)

def create_env_file(sender_email, sender_password, recipient_email, smtp_server, smtp_port):
    """Create .env file with email configuration"""
    env_content = f"""# OASIS Margin Optimization Environment Variables
# Generated by setup_email.py

# Email Configuration
EMAIL_PASSWORD={sender_password}
EMAIL_SENDER={sender_email}
EMAIL_RECIPIENT={recipient_email}
SMTP_SERVER={smtp_server}
SMTP_PORT={smtp_port}

# Security Note:
# - Never commit this .env file to version control
# - The .env file should be added to .gitignore
# - Use different passwords for different environments (dev/staging/prod)
"""
    
    with open(".env", "w") as f:
        f.write(env_content)
    
    print(f"💾 Environment variables saved to .env file")

def setup_email_config():
    """Interactive setup for email configuration"""
    print("🔧 OASIS Email Notification Setup (Environment Variables)")
    print("=" * 60)
    
    # Check if .env already exists
    if os.path.exists(".env"):
        overwrite = input("📄 .env file already exists. Overwrite? (y/n): ").strip().lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    # Get email provider choice
    print("\nSelect your email provider:")
    print("1. Gmail")
    print("2. Outlook/Hotmail")
    print("3. Yahoo")
    print("4. Custom SMTP")
    
    choice = input("\nEnter choice (1-4): ").strip()
    
    # Set SMTP settings based on provider
    if choice == "1":
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        print("\n📧 Gmail selected")
        print("⚠️ Important: You need to use an App Password, not your regular Gmail password!")
        print("Setup instructions:")
        print("1. Enable 2-factor authentication on your Gmail account")
        print("2. Go to Google Account settings > Security > App passwords")
        print("3. Generate an app password for this application")
        print("4. Use that app password below (not your regular password)")
    elif choice == "2":
        smtp_server = "smtp-mail.outlook.com"
        smtp_port = 587
        print("\n📧 Outlook selected")
    elif choice == "3":
        smtp_server = "smtp.mail.yahoo.com"
        smtp_port = 587
        print("\n📧 Yahoo selected")
    elif choice == "4":
        smtp_server = input("Enter SMTP server: ").strip()
        smtp_port = int(input("Enter SMTP port (usually 587): ").strip())
        print(f"\n📧 Custom SMTP: {smtp_server}:{smtp_port}")
    else:
        print("Invalid choice. Exiting.")
        return
    
    # Get email credentials
    print(f"\n🔐 Enter your email credentials for {smtp_server}")
    sender_email = input("Your email address: ").strip()
    sender_password = getpass.getpass("Your password (app password for Gmail): ")
    
    print(f"\n📬 Where should notifications be sent?")
    recipient_email = input(f"Recipient email (press Enter for {sender_email}): ").strip()
    if not recipient_email:
        recipient_email = sender_email
    
    # Test connection
    print(f"\n🧪 Testing email connection...")
    success, message = test_email_connection(smtp_server, smtp_port, sender_email, sender_password)
    
    if success:
        print("✅ Email connection test successful!")
        
        # Send test email
        send_test = input("\n📤 Send a test notification email? (y/n): ").strip().lower()
        if send_test == 'y':
            try:
                server = smtplib.SMTP(smtp_server, smtp_port)
                server.starttls()
                server.login(sender_email, sender_password)
                
                msg = MIMEText("🧪 This is a test email from OASIS Margin Optimization.\n\n✅ Email notifications are now configured with environment variables and working!")
                msg['Subject'] = "🧪 OASIS Test Notification"
                msg['From'] = sender_email
                msg['To'] = recipient_email
                
                server.send_message(msg)
                server.quit()
                print("✅ Test email sent successfully!")
            except Exception as e:
                print(f"❌ Failed to send test email: {e}")
    else:
        print(f"❌ Email connection test failed: {message}")
        print("Please check your credentials and try again.")
        return
    
    # Create .env file
    create_env_file(sender_email, sender_password, recipient_email, smtp_server, smtp_port)
    
    # Update email_config.json (remove password, keep other settings)
    config = {
        "email_config": {
            "smtp_server": smtp_server,
            "smtp_port": smtp_port,
            "sender_email": sender_email,
            "recipient_email": recipient_email,
            "enable_email": True
        },
        "instructions": {
            "note": "Password is loaded from EMAIL_PASSWORD environment variable",
            "setup_env_file": [
                "1. Password and sensitive data are stored in .env file",
                "2. Environment variables can override email_config.json settings",
                "3. .env file should never be committed to version control"
            ],
            "setup_gmail": [
                "1. Enable 2-factor authentication on your Gmail account",
                "2. Go to Google Account settings > Security > App passwords",
                "3. Generate an app password for this script",
                "4. Add the app password to .env file as EMAIL_PASSWORD"
            ]
        }
    }
    
    with open("email_config.json", "w") as f:
        json.dump(config, f, indent=2)
    
    print(f"\n💾 Email configuration updated in email_config.json")
    print(f"🔒 Sensitive data stored securely in .env file")
    print(f"📧 Notifications will be sent to: {recipient_email}")
    
    # Remind about .gitignore
    print(f"\n⚠️ IMPORTANT SECURITY REMINDER:")
    print(f"   Add .env to your .gitignore file to prevent committing passwords!")
    
    if not os.path.exists(".gitignore"):
        add_gitignore = input("\n📝 Create .gitignore file with .env entry? (y/n): ").strip().lower()
        if add_gitignore == 'y':
            with open(".gitignore", "w") as f:
                f.write("# Environment variables\n.env\n\n# Python\n__pycache__/\n*.pyc\n*.pyo\n")
            print("✅ Created .gitignore with .env entry")
    
    print(f"\n🚀 Setup complete! You can now run the margin optimization script:")
    print(f"   python margin_optimization.py")

if __name__ == "__main__":
    setup_email_config()
